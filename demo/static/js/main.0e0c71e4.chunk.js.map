{"version":3,"sources":["contexts/language-infos-context.tsx","components/progress-bar.tsx","components/info.tsx","pages/dashboard/language-info-item.tsx","pages/dashboard/dashboard-sidebar.tsx","components/react-select.tsx","pages/dashboard/add-language-infos-button.tsx","pages/dashboard/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LS_KEY","languageInfosStr","JSON","parse","localStorage","getItem","initLanguageInfos","Array","isArray","languageInfosList","languageInfosContext","React","createContext","useLanguageInfos","context","useContext","Error","LanguageInfosProvider","props","useState","languageInfos","setLanguageInfos","value","useMemo","setItem","stringify","Provider","ProgressBar","progress","variant","className","style","height","data-test","now","Info","label","href","onClick","e","preventDefault","CustomToggle","forwardRef","ref","children","LanguageInfoItem","info","removeLanguageInfo","name","countryCode","done","total","unverified","todo","donePercentage","Math","round","infos","code","Dropdown","Toggle","as","id","Menu","align","Item","eventKey","map","index","DashboardSidebar","items","reduce","item","ReactSelect","selectProps","classNamePrefix","languageOptions","languages","language","AddLanguageInfosButton","addLanguages","error","setError","values","setValues","show","setShow","handleClose","Button","size","Modal","onHide","Header","closeButton","Body","Alert","options","isMulti","placeholder","defaultMenuIsOpen","onChange","newValue","Footer","length","v","shortid","generate","Dashboard","addLanguagesInfo","useCallback","newInfos","splice","App","minWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e0c71e4.chunk.js","sourcesContent":["import React, {Dispatch, ProviderProps, SetStateAction} from \"react\";\r\nimport {LanguageInfo} from \"../types\";\r\nimport languageInfosList from \"../data/language-items.json\";\r\n\r\nconst LS_KEY = \"language-items\";\r\nconst languageInfosStr: any = JSON.parse(localStorage.getItem(LS_KEY) || \"{}\");\r\nconst initLanguageInfos: LanguageInfo[] = Array.isArray(languageInfosStr) ? languageInfosStr : languageInfosList;\r\n\r\nconst languageInfosContext = React.createContext(null);\r\n\r\n/**\r\n * @function useLanguageInfos\r\n * @returns {Array} languageInfosContext value, which is a state of [value, setter].\r\n *\r\n */\r\nexport const useLanguageInfos: () => [LanguageInfo[], Dispatch<SetStateAction<LanguageInfo[]>>] =\r\n    () => {\r\n        // useContext is a hook that returns the context value\r\n        // In this case, the context value is an [value, setter] array for the context state\r\n        // useContext also subscribes to changes, and will update any time the context value updates\r\n        //     we've memoized this so that it will only update when the guessedWords value updates\r\n        const context = React.useContext(languageInfosContext);\r\n\r\n        // throw an error if the context doesn't exist -- means we aren't in a provider\r\n        if (!context) {\r\n            throw new Error(\"useLanguageInfos must be used within a LanguageInfosProvider\");\r\n        }\r\n\r\n        // otherwise return the context\r\n        return context as any as [LanguageInfo[], Dispatch<SetStateAction<LanguageInfo[]>>];\r\n    };\r\n\r\n/**\r\n * @function GuessedWordsProvider\r\n * @param {object} props - props to pass through from declared component\r\n * @returns {JSX.Element} Provider component\r\n */\r\nexport const LanguageInfosProvider = (props: Partial<ProviderProps<any>>) => {\r\n    // create state that will be used within the provider\r\n    // initial state value is false\r\n    const [languageInfos, setLanguageInfos] = React.useState(initLanguageInfos);\r\n\r\n    // value for the context provider will be array of [value, setter] for guessedWords state\r\n    // useMemo just ensures that the provider value will only update when guessedWords updates\r\n    // No need to test this -- React tests useMemo for us!\r\n    const value = React.useMemo(() => {\r\n        // Save in local storage\r\n        localStorage.setItem(LS_KEY, JSON.stringify(languageInfos));\r\n        return [languageInfos, setLanguageInfos];\r\n    }, [languageInfos, setLanguageInfos]);\r\n\r\n    // Return a Provider component with the [value, setter] array as the value, passing through the props\r\n    return <languageInfosContext.Provider value={value} {...props} />;\r\n};\r\n\r\nconst contextExport = {LanguageInfosProvider, useLanguageInfos};\r\n\r\nexport default contextExport;","import React from \"react\";\r\nimport * as ReactBootstrap from \"react-bootstrap\";\r\n\r\nexport interface ProgressBarProps {\r\n    progress: number;\r\n}\r\n\r\n/**\r\n * ProgressBar component\r\n *\r\n * @param progress\r\n *\r\n * @constructor\r\n *\r\n * @return JSX.Element\r\n */\r\nconst ProgressBar: React.FC<ProgressBarProps> = ({progress}: ProgressBarProps): JSX.Element => {\r\n    return (\r\n        <ReactBootstrap.ProgressBar\r\n            variant={(progress < 50 ? \"danger\" : \"info\")}\r\n            className=\"progress mb-2 mt-2\" style={{height: \"1px\"}}\r\n            data-test=\"component-progress-bar\"\r\n            now={progress}\r\n        />\r\n    )\r\n        ;\r\n};\r\n\r\nexport default ProgressBar;","import React from \"react\";\r\n\r\nexport interface InfoProps {\r\n    label: string;\r\n    value: string | number;\r\n    href?: string;\r\n}\r\n\r\n/**\r\n * Info component\r\n *\r\n * @param label\r\n * @param value\r\n * @param valueAttributes\r\n *\r\n * @constructor\r\n *\r\n * @return JSX.Element\r\n */\r\nconst Info: React.FC<InfoProps> = ({label, value, href}: InfoProps): JSX.Element => {\r\n    return (\r\n        <div data-test=\"component-info\">\r\n            <div className=\"text-uppercase small\" data-test=\"element-label\">{label}</div>\r\n            <div className=\"h5\" data-test=\"element-value\">\r\n                {\r\n                    href ?\r\n                        <a href={href} {...(href === \"#\" &&\r\n                            {onClick: (e: React.MouseEvent<HTMLAnchorElement>) => e.preventDefault()})}>{value}</a>\r\n                        : value\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Info;","import React, {LegacyRef} from \"react\";\r\nimport Flag from \"react-world-flags\";\r\nimport {Dropdown} from \"react-bootstrap\";\r\nimport {LanguageInfo} from \"../../types\";\r\nimport ProgressBar from \"../../components/progress-bar\";\r\nimport Info, {InfoProps} from \"../../components/info\";\r\nimport \"./language-info-item.scss\";\r\n\r\nexport interface LanguageInfoItemProps {\r\n    info: LanguageInfo;\r\n    removeLanguageInfo: () => void;\r\n}\r\n\r\nconst CustomToggle = React.forwardRef(({children, onClick}: any, ref: LegacyRef<HTMLAnchorElement> | undefined) => (\r\n    <a\r\n        href=\"/#\"\r\n        ref={ref}\r\n        className=\"text-dark text-decoration-none font-weight-bold\"\r\n        onClick={(e) => {\r\n            e.preventDefault();\r\n            onClick(e);\r\n        }}\r\n    >\r\n        {children}\r\n    </a>\r\n));\r\n\r\n/**\r\n * LanguageInfoItem component\r\n *\r\n * @param info\r\n * @param removeLanguageInfo\r\n *\r\n * @constructor\r\n *\r\n * @return JSX.Element\r\n */\r\nconst LanguageInfoItem: React.FC<LanguageInfoItemProps> = ({info, removeLanguageInfo}: LanguageInfoItemProps): JSX.Element => {\r\n    const {name, countryCode, done, total, unverified}: LanguageInfo = info;\r\n    const todo: number = total - done;\r\n    const donePercentage = Math.round(done * 100 / total);\r\n    const infos: InfoProps[] = [\r\n        {label: \"done\", value: `${donePercentage}%`},\r\n        {label: \"todo\", value: todo, href: \"#\"},\r\n        {label: \"unverified\", value: unverified, href: \"#\"}\r\n    ];\r\n\r\n    return (\r\n        <div className=\"language-item\" data-test=\"component-language-info-item\">\r\n            <div className=\"d-flex\">\r\n                <div>\r\n                    <a href=\"/#\" onClick={(e: React.MouseEvent<HTMLAnchorElement>) => e.preventDefault()}\r\n                       data-test=\"element-link\">\r\n                        <Flag\r\n                            code={countryCode} height=\"9\" data-test=\"element-flag\"/>\r\n                        <span className=\"ml-1\">{name}</span>\r\n                    </a>\r\n                </div>\r\n                <div className=\"ml-auto\">\r\n                    <Dropdown data-test=\"element-dropdown\">\r\n                        <Dropdown.Toggle as={CustomToggle} id=\"dropdown-custom-components\"\r\n                                         data-test=\"element-dropdown-toggle\">\r\n                            ⋯\r\n                        </Dropdown.Toggle>\r\n\r\n                        <Dropdown.Menu align=\"right\">\r\n                            <Dropdown.Item eventKey=\"1\" onClick={removeLanguageInfo}\r\n                                           data-test=\"element-delete-dropdown-item\">\r\n                                <small>Delete language...</small>\r\n                            </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </div>\r\n            </div>\r\n            <ProgressBar progress={donePercentage}/>\r\n            <div className=\"d-flex flex-wrap\">\r\n                {\r\n                    infos.map((info: InfoProps, index: number) => (\r\n                        <div className={\"language-item-info\" + ((index === 2) ? \" text-right\" : \"\")} key={index}>\r\n                            <Info {...info} data-test=\"element-info\"/>\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LanguageInfoItem;","import React from \"react\";\r\nimport {LanguageInfo} from \"../../types\";\r\nimport ProgressBar from \"../../components/progress-bar\";\r\nimport Info, {InfoProps} from \"../../components/info\";\r\nimport \"./dashboard-sidebar.scss\";\r\n\r\nexport interface DashboardSidebarProps {\r\n    items: LanguageInfo[];\r\n}\r\n\r\n/**\r\n * DashboardSidebar component\r\n *\r\n * @param items\r\n *\r\n * @constructor\r\n *\r\n * @return JSX.Element\r\n */\r\nconst DashboardSidebar: React.FC<DashboardSidebarProps> = ({items}: DashboardSidebarProps): JSX.Element => {\r\n    const {total, done} = items.reduce((value: { total: number, done: number }, item: LanguageInfo) => {\r\n        return {\r\n            total: value.total + item.total,\r\n            done: value.done + item.done\r\n        };\r\n    }, {total: 0, done: 0});\r\n\r\n    const donePercentage = (total === 0) ? 0 : Math.round(done * 100 / total);\r\n    const infos: InfoProps[] = [\r\n        {label: \"done\", value: `${donePercentage}%`},\r\n        {label: \"base words\", value: 160246},\r\n        {label: \"team\", value: 26, href: \"#\"},\r\n        {label: \"keys\", value: 1834},\r\n        {label: \"qa issues\", value: 47154, href: \"#\"}\r\n    ];\r\n\r\n    return (\r\n        <div className=\"sidebar\" data-test=\"component-dashboard-sidebar\">\r\n            <a href=\"/#\" className=\"text-primary h5 font-weight-normal text-decoration-none d-block mb-2\"\r\n               onClick={(e: React.MouseEvent<HTMLAnchorElement>) => e.preventDefault()} data-test=\"element-link\">Sample\r\n                Project</a>\r\n            <ProgressBar progress={25} data-test=\"element-progress-bar\"/>\r\n            <div className=\"d-flex flex-wrap\">\r\n                {\r\n                    infos.map((info: InfoProps, index: number) => (\r\n                        <div className=\"sidebar-info\" key={index}>\r\n                            <Info {...info} data-test=\"element-info\"/>\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DashboardSidebar;","import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport {SelectComponentsProps} from \"react-select/base\";\r\nimport \"./react-select.scss\";\r\n\r\n/**\r\n * ReactSelect component\r\n *\r\n * @param props\r\n *\r\n * @constructor\r\n *\r\n * @return JSX.Element\r\n */\r\nconst ReactSelect: React.FC<SelectComponentsProps> = (props: SelectComponentsProps): JSX.Element => {\r\n    const selectProps: SelectComponentsProps = {...props, classNamePrefix: \"react-select\"};\r\n    return (\r\n        <Select {...selectProps} data-test=\"component-react-select\"/>\r\n    );\r\n};\r\n\r\nexport default ReactSelect;","import React from \"react\";\r\nimport {Alert, Button, Modal} from \"react-bootstrap\";\r\nimport {OptionsType} from \"react-select\";\r\nimport shortid from \"shortid\";\r\nimport {LanguageInfo} from \"../../types\";\r\nimport languages from \"../../data/languages.json\";\r\nimport ReactSelect from \"../../components/react-select\";\r\nimport \"./add-language-infos-button.scss\";\r\n\r\nconst languageOptions: OptionsType<any> = languages.map((language) => ({\r\n    value: language.id,\r\n    label: language.name,\r\n    countryCode: language.countryCode\r\n}));\r\n\r\nexport interface AddLanguageInfosButtonProps {\r\n    addLanguages: (infos: LanguageInfo[]) => void;\r\n}\r\n\r\n/**\r\n * AddLanguageInfosButton component\r\n *\r\n * @param addLanguages\r\n *\r\n * @constructor\r\n *\r\n * @return JSX.Element\r\n */\r\nconst AddLanguageInfosButton: React.FC<AddLanguageInfosButtonProps> = ({addLanguages}: AddLanguageInfosButtonProps): JSX.Element => {\r\n    const [error, setError] = React.useState(null as string | null);\r\n    const [values, setValues] = React.useState([]);\r\n    const [show, setShow] = React.useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    const handleSave = () => {\r\n        if (values.length === 0) {\r\n            setError(\"Select at least one language to add\");\r\n        } else {\r\n            setError(null);\r\n            addLanguages(values.map((v: any) => ({\r\n                id: shortid.generate(),\r\n                name: v.label,\r\n                countryCode: v.countryCode,\r\n                done: 345,\r\n                total: 1000,\r\n                unverified: 50000\r\n            })));\r\n            setShow(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"language-item\" data-test=\"component-add-language-infos-button\">\r\n            <Button variant=\"outline-primary\" size=\"sm\" onClick={handleShow} data-test=\"btn-add-languages\">Add\r\n                language</Button>\r\n            <Modal show={show} onHide={handleClose}\r\n                   className=\"add-languages-modal\"\r\n                   data-test=\"element-modal\">\r\n                <Modal.Header closeButton className=\"text-dark p-0 border-0\">Add languages\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {\r\n                        error ?\r\n                            <Alert variant=\"warning\">{error}</Alert> : null\r\n                    }\r\n                    <ReactSelect options={languageOptions} isMulti={true}\r\n                                 placeholder=\"Select one or more languages\"\r\n                                 defaultMenuIsOpen={true}\r\n                                 onChange={(newValue: any) => setValues(newValue)}\r\n                                 classNamePrefix=\"language-select\"\r\n                                 data-test=\"element-select\"/>\r\n                </Modal.Body>\r\n                <Modal.Footer className=\"border-0 p-0\">\r\n                    <Button variant=\"outline-secondary\" size=\"sm\" onClick={handleClose} data-test=\"btn-cancel\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button variant=\"primary\" size=\"sm\" onClick={handleSave} data-test=\"btn-add\">\r\n                        Add\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddLanguageInfosButton;","import React from \"react\";\r\nimport {Button} from \"react-bootstrap\";\r\nimport LanguageInfoItem from \"./language-info-item\";\r\nimport DashboardSidebar from \"./dashboard-sidebar\";\r\nimport AddLanguageInfosButton from \"./add-language-infos-button\";\r\nimport {useLanguageInfos} from \"../../contexts/language-infos-context\";\r\nimport {LanguageInfo} from \"../../types\";\r\nimport \"./index.scss\";\r\n\r\n/**\r\n * Dashboard component\r\n *\r\n * @constructor\r\n *\r\n * @return JSX.Element\r\n */\r\nconst Dashboard: React.FC = (): JSX.Element => {\r\n\r\n    const [languageInfos, setLanguageInfos] = useLanguageInfos();\r\n\r\n    const addLanguagesInfo = React.useCallback((infos: LanguageInfo[]) => {\r\n        setLanguageInfos([...languageInfos, ...infos]);\r\n    }, [languageInfos, setLanguageInfos]);\r\n\r\n    const removeLanguageInfo = React.useCallback((index: number) => {\r\n        const newInfos: LanguageInfo[] = [...languageInfos];\r\n        newInfos.splice(index, 1);\r\n        setLanguageInfos(newInfos);\r\n    }, [languageInfos, setLanguageInfos]);\r\n\r\n    return (\r\n        <div data-test=\"component-dashboard\">\r\n            <div>\r\n                <Button variant=\"primary\" size=\"sm\">New project ⇧-Ctrl-P</Button>\r\n                <Button variant=\"outline-primary\" size=\"sm\" className=\"ml-2\">Expand All</Button>\r\n                <Button variant=\"outline-primary\" size=\"sm\" className=\"ml-2\">Collapse All</Button>\r\n            </div>\r\n            <div className=\"dashboard-container d-flex pt-4 pb-4\">\r\n                <DashboardSidebar items={languageInfos} data-test=\"element-dashboard-sidebar\"/>\r\n                <div className=\"languages\">\r\n                    {\r\n                        (languageInfos).map((info: LanguageInfo, index: number) => (\r\n                            <LanguageInfoItem key={info.id} info={info}\r\n                                              removeLanguageInfo={() => removeLanguageInfo(index)}\r\n                                              data-test=\"element-language-info-item\"/>\r\n                        ))\r\n                    }\r\n                    <AddLanguageInfosButton addLanguages={addLanguagesInfo}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","import React from \"react\";\nimport {LanguageInfosProvider} from \"./contexts/language-infos-context\";\nimport Dashboard from \"./pages/dashboard\";\n\n/**\n * App component\n *\n * @constructor\n *\n * @return JSX.Element\n */\nconst App: React.FC = (): JSX.Element => {\n    return (\n        <div className=\"container p-3\" style={{minWidth: \"90%\"}} data-test=\"component-app\">\n            <LanguageInfosProvider>\n                <Dashboard/>\n            </LanguageInfosProvider>\n\n        </div>\n    );\n};\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}